
/**
A KBase module: ReadsAlignmentUtils

This module is intended for use by Aligners and Assemblers to upload and download alignment files.
The alignment may be uploaded as .sam or .bam files. Once uploaded, the alignment can be
downloaded in .sam, sorted .bam or .bai file formats. This utility also generates stats from
the stored alignment.
**/


module ReadsAlignmentUtils {

   /* A boolean - 0 for false, 1 for true.
       @range (0, 1)
   */
   typedef int boolean;


   /** Input parameters for validating a reads alignment **/

   typedef structure {
       string file_path;  /* path to sam or bam file generated by
                             the alignment program */
   }  ValidateAlignmentParams;


   /** Results from validate alignment **/

   typedef structure {
       boolean validated;
   } ValidateAlignmentOutput;


   funcdef  validate_alignment(ValidateAlignmentParams params)
          returns (ValidateAlignmentOutput)
          authentication required;


   typedef structure {
       string aligned_using;       /* Optional ‘hisat2’, ‘tophat2’, ‘bowtie2’ or
                                      some other aligner name */
       string aligner_version;     /* Optional */
       string library_type;        /* ‘single_end’, ‘paired_end’ */
       string read_sample_id;      /* workspace id of read sample used to make
                                      the alignment file */
       string replicate_id;        /* Optional */
       string condition;           /* Optional */
       string platform;            /* Optional */
       string genome_id;           /* workspace id of genome annotation that was
                                      used to build the alignment */

       /**
       ws_bowtieIndex_id bowtie2_index;  Optional
       <mapping> aligner_opts;           Optional
       <mapping> mapped_sample_id;        Optional
       ws_Sampleset_id sampleset_id;     Optional. workspace id of
                                           sample_set to which the
                                           read_sample_id may belong  **/
       /* source */
       string file_path;           /* path to sam or bam file generated by
                                      the alignment program */
       /* destination */
       string ws_id_or_name;       /*  A numeric value is interpreted
                                       as an id and an alpha-numeric value is
                                       interpreted as a name */
	   string name;                /*  name of the workspace object  */

   }  UploadAlignmentParams;


   /**  Output report from uploading a reads alignment  **/

      typedef structure {
           string obj_ref;
      } UploadAlignmentOutput;


   /**  Validates and uploads the reads alignment  **/

     funcdef upload_alignment(UploadAlignmentParams params)
                     returns (UploadAlignmentOutput)
                     authentication required;

     typedef structure {
          string ws_id_or_name; /*  A numeric value is interpreted
                              as an id and an alpha-numeric value is
                              interpreted as a name */
          string name;          /*  name of the workspace object  */
          boolean downloadBAM;  /* default is true */
          boolean downloadSAM;  /* default is false */
          boolean downloadBAI;  /* default is false */
     } DownloadAlignmentParams;


    /** @optional singletons multiple_alignments, properly_paired,
                  alignment_rate, unmapped_reads, mapped_sections total_reads,
                  mapped_reads
    **/

     typedef structure {
         int    properly_paired;
         int    multiple_alignments;
         int    singletons;
         float  alignment_rate;
         int    unmapped_reads;
         int    mapped_reads;
         int    total_reads;
     } AlignmentStats;


    /**  The output of the download method.  **/

     typedef structure {
         string ws_id;     /* source */
         string bam_file;  /* assembler expects to retain the original
                              filename from the aligner */
         string bai_file;
         AlignmentStats stats;
     } DownloadAlignmentOutput;


     typedef structure {
         string input_ref;   /* workspace object reference */
     } ExportParams;

     typedef structure {
         string shock_id;   /* shock id of file to export */
     } ExportOutput;


    /** Wrapper function for use by in-narrative downloaders to download alignments from shock **/
       funcdef export_alignment(ExportParams params)
                       returns (ExportOutput output)
                       authentication required;


    /** Downloads .bam and .bai files along with alignment stats **/

       funcdef download_alignment(DownloadAlignmentParams params)
                         returns (DownloadAlignmentOutput)
                         authentication required;

};
